{"version":3,"sources":["context/notesContext.js","components/TaskInput.jsx","components/TaskList.jsx","pages/Todo.js","context/Provider.js","App.js","reportWebVitals.js","index.js"],"names":["notesContext","createContext","TaskInput","addNote","useContext","useState","task","id","setTask","className","type","placeholder","value","onChange","event","target","Date","now","onClick","TaskList","notes","map","note","index","Todo","Provider","children","setNotes","state","removeNote","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAIeA,EAFMC,0B,OC2BNC,MA1Bf,WACE,IAAQC,EAAYC,qBAAWJ,GAAvBG,QACR,EAAwBE,mBAAS,CAC/BC,KAAM,GACNC,GAAI,IAFN,mBAAOD,EAAP,KAAaE,EAAb,KAKA,OACE,sBAAKC,UAAU,aAAf,UACE,uBACEC,KAAK,OACLC,YAAY,aACZC,MAAON,EAAKA,KACZO,SAAW,SAACC,GAAYN,EAAQ,CAC9BF,KAAMQ,EAAMC,OAAOH,MACnBL,GAAIS,KAAKC,WAGb,wBAAQC,QAAS,WAAQf,EAAQG,GAAOE,EAAQ,CAC9CF,KAAM,GACNC,GAAI,KAFN,0BCDSY,MAjBf,WACE,IAAQC,EAAUhB,qBAAWJ,GAArBoB,MACR,OACE,8BACE,6BAEIA,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACR,6BACGD,EAAKhB,MADCiB,WCKNC,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,Q,OCmBSC,MA1Bf,YAAkC,IAAbC,EAAY,EAAZA,SAEnB,EAA0BrB,mBAAS,IAAnC,mBAAOe,EAAP,KAAcO,EAAd,KAUMC,EAAQ,CACZR,QACAO,WACAxB,QAXc,SAACmB,GACfK,EAAS,GAAD,mBAAKP,GAAL,CAAYE,MAWpBO,WARiB,SAACtB,GAClBoB,EAASP,EAAMU,QAAO,SAAAR,GAAI,OAAIA,EAAKf,KAAOA,QAU5C,OACE,cAAC,EAAakB,SAAd,CAAuBb,MAAQgB,EAA/B,SACGF,KCXQK,MARf,WACE,OACI,cAAC,EAAD,UACE,cAAC,EAAD,OCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2c354844.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst notesContext = createContext();\n\nexport default notesContext;\n","import React, { useContext, useState } from 'react';\nimport notesContext from '../context/notesContext';\n\nfunction TaskInput() {\n  const { addNote } = useContext(notesContext);\n  const [task, setTask] = useState({\n    task: '',\n    id: 0,\n  });\n\n  return (\n    <div className=\"task-input\">\n      <input\n        type=\"text\"\n        placeholder=\"Enter task\"\n        value={task.task}\n        onChange={ (event) => { setTask({\n          task: event.target.value,\n          id: Date.now(),\n        }) } }\n      />\n      <button onClick={() => { addNote(task); setTask({\n        task: '',\n        id: 0,\n      }); } }>Add Task</button>\n    </div>\n  );\n}\n\nexport default TaskInput;","import React, { useContext } from 'react';\nimport notesContext from '../context/notesContext';\n\nfunction TaskList () {\n  const { notes } = useContext(notesContext);\n  return (\n    <div>\n      <ul>\n        {\n          notes.map((note, index) => (\n            <li key={index}>\n              {note.task}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default TaskList;\n","import React from 'react';\nimport TaskInput from '../components/TaskInput';\nimport TaskList from '../components/TaskList';\n\n//  tests\n\nfunction Todo() {\n  return (\n    <div>\n      <TaskInput />\n      <TaskList />\n    </div> \n    );\n}\n\nexport default Todo;\n","import notesContext from './notesContext';\nimport React, { useState } from 'react';\n\nfunction Provider ({ children }) {\n\n  const [notes, setNotes] = useState([]);\n\n  const addNote = (note) => {\n    setNotes([...notes, note]);\n  };\n\n  const removeNote = (id) => {\n    setNotes(notes.filter(note => note.id !== id));\n  };\n\n  const state = {\n    notes,\n    setNotes,\n    addNote,\n    removeNote,\n  };\n  \n  return (\n    <notesContext.Provider value={ state } >\n      {children}\n    </notesContext.Provider>\n  )\n}\n\nexport default Provider;\n","import './App.css';\nimport React from 'react';\nimport Todo from './pages/Todo';\nimport Provider from './context/Provider';\n\nfunction App() {\n  return (\n      <Provider>\n        <Todo />\n      </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}