{"version":3,"sources":["context/notesContext.js","components/TaskInput.jsx","components/TaskList.jsx","components/TaskFilter.jsx","components/Header.jsx","pages/Todo.js","context/Provider.js","App.js","reportWebVitals.js","index.js"],"names":["notesContext","createContext","TaskInput","useContext","addNote","setTypes","types","useState","other","setOther","otherType","setOtherType","task","id","done","type","setTask","handleOtherState","className","placeholder","value","onChange","event","target","Date","now","onClick","name","e","handleOtherType","TaskList","notes","removeNote","saveEditedNote","editNote","setEditNote","handleTaskDoneStatus","filteredTypeTasks","filteredType","typeTaskFilter","editNoteController","note","noteToEdit","find","map","index","TaskFilter","props","Header","src","alt","Component","Todo","Provider","children","setNotes","setDone","setFilteredTypeTasks","setFilteredType","useEffect","filter","state","newText","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b4a0fee.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst notesContext = createContext();\n\nexport default notesContext;\n","import React, { useContext, useState } from 'react';\nimport notesContext from '../context/notesContext';\nimport '../styles/TaskInput.css';\n\nfunction TaskInput() {\n  const { addNote, setTypes, types } = useContext(notesContext);\n  const [other, setOther] = useState(false);\n  const [otherType, setOtherType] = useState('');\n\n  const [task, setTask] = useState({\n    task: '',\n    id: 0,\n    done: false,\n    type: '',\n  });\n\n  const handleOtherType = (e) => {\n    setOtherType(e.target.value);\n  };\n\n  const handleOtherState = () => {\n    setOther(false)\n  }\n\n  const handleOtherTypeSave = () => {\n    setOther(false);\n    setTask({\n      ...task,\n      type: otherType,\n    });\n    setTypes([...types, otherType]);\n  };\n\n  return (\n    <div className=\"task-input\">\n      <div className=\"task-input-text-container\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter task\"\n          value={task.task}\n          onChange={ (event) => { setTask({\n            task: event.target.value,\n            id: Date.now(),\n            done: false,\n            type: '',\n          }) } }\n          className=\"task-text-input\"\n          data-testid=\"text-input\"\n        />\n          <button\n            data-testid=\"add-task-button\"\n            className=\"task-save-button\"\n            onClick={() => { addNote(task); setTask({\n            task: '',\n            id: 0,\n            done: false,\n            type: '',\n          }); } }>Add Task</button>\n      </div>\n      <section id=\"inputs-radio-tasks\">\n        <label className=\"input-label\">work</label>\n        <input data-testid=\"work-type\" type=\"radio\" name=\"type-task\" onChange={() => { setTask({...task, type: \"work\"}); handleOtherState() } } />\n        <label className=\"input-label\">home</label>\n        <input data-testid=\"home-type\" type=\"radio\" name=\"type-task\" onChange={() => { setTask({...task, type: \"home\"}); handleOtherState() }} />\n        <label className=\"input-label\">school</label>\n        <input data-testid=\"school-type\" type=\"radio\" name=\"type-task\" onChange={() => { setTask({...task, type: \"school\"}); handleOtherState() } } />\n        <label className=\"input-label\">other</label>\n        <input data-testid=\"other-type\" type=\"radio\" name=\"type-task\" onChange={() => setOther(true) } />\n        {other && (\n          <div className=\"other-save\">\n            <input data-testid=\"text-other-input\" id=\"other-text-input\" type=\"text\" placeholder=\"Enter type\" value={otherType} onChange={(e) => handleOtherType(e)} />\n            <button data-testid=\"btn-other-input\" id=\"other-save-button\" onClick={handleOtherTypeSave}>Save</button>\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}\n\nexport default TaskInput;","import React, { useContext } from 'react';\nimport notesContext from '../context/notesContext';\nimport '../styles/TaskList.css';\n\nfunction TaskList () {\n  const {\n    notes,\n    removeNote, \n    saveEditedNote, \n    editNote, \n    setEditNote, \n    handleTaskDoneStatus, \n    filteredTypeTasks, \n    filteredType, \n    typeTaskFilter\n  } = useContext(notesContext);\n\n  const editNoteController = (note) => {\n    const noteToEdit = notes.find(({ id }) => id === note.id);\n    setEditNote(noteToEdit);\n  };\n\n  return (\n    <div className=\"task-list-big\">\n        { filteredType === 'all' ?\n          notes.map((note, index) => (\n            <div key={index} className=\"task-list-container\">              \n              <li data-testid={`task-${index + 1}`} className={ note.done ? 'done-task' : 'not-done-task' }>\n                {`${note.task} - ${note.type}`}\n              </li>\n              { editNote.id === note.id && <div className=\"extra-edit-container\"> <input data-testid=\"edit-text-task\" id=\"extra-edit-input\" type=\"text\" value={editNote.task} onChange={(e) => setEditNote({...editNote, task: e.target.value})} /> <button data-testid=\"save-btn-task\" id=\"extra-edit-btn\" onClick={() => saveEditedNote(editNote.id, editNote.task)}>Save</button> </div> }\n              <button data-testid=\"delete-btn-task\" className=\"btn-task-list\" id=\"delete-btn\" onClick={() => removeNote(note.id)}>\n                Delete\n              </button>\n              <button data-testid=\"edit-btn-task\" className=\"btn-task-list\" id=\"edit-btn\" onClick={() => editNoteController(note)}>\n                Edit\n              </button>\n              <button data-testid={ note.done ? 'undo-btn' : 'done-btn' } className=\"btn-task-list\" id={ `${note.done}-btn` } onClick={() => handleTaskDoneStatus(note.id)}>\n                { note.done ? 'Undo' : 'Done' }\n              </button>\n            </div>\n          ))\n          : filteredTypeTasks.map((note, index) => (\n            <div className=\"task-list-container\" key={index}>\n              <li data-testid={`ft-task-${index + 1}`} className={ note.done ? 'done-task' : 'not-done-task' }>\n                {`Task: ${note.task} - Type: ${note.type}`}\n              </li>\n              { editNote.id === note.id && <div className=\"extra-edit-container\" > <input data-testid=\"ft-edit-text-task\" id=\"extra-edit-input\" type=\"text\" value={editNote.task} onChange={(e) => setEditNote({...editNote, task: e.target.value})} /> <button data-testid=\"ft-save-btn-task\" id=\"extra-edit-btn\" onClick={() => { saveEditedNote(editNote.id, editNote.task); typeTaskFilter(editNote.type)}}>Save</button> </div> }\n              <button data-testid=\"ft-delete-btn-task\" className=\"btn-task-list\" id=\"delete-btn\" onClick={() => removeNote(note.id)}>\n                Delete\n              </button>\n              <button data-testid=\"ft-edit-btn-task\" className=\"btn-task-list\" id=\"edit-btn\" onClick={() => editNoteController(note)}>\n                Edit\n              </button>\n              <button data-testid={ note.done ? 'ft-undo-btn' : 'ft-done-btn' } id={ `${note.done}-btn` } onClick={() => handleTaskDoneStatus(note.id)}>\n                { note.done ? 'Undo' : 'Done' }\n              </button>\n            </div>\n          ))   \n        }\n    </div>\n  );\n}\n\nexport default TaskList;\n","import React, { useContext } from 'react';\nimport notesContext from '../context/notesContext';\nimport '../styles/TaskFilter.css';\n\nfunction TaskFilter (props) {\n\n  const { typeTaskFilter, types } = useContext(notesContext);\n\n  return (\n    <div className=\"task-filter-container\">\n      <h3>Filter By:</h3>\n      { types && types.map(type => (\n        <label id=\"filter-label\" key={type} >{type} \n          <input \n            type=\"radio\" \n            name=\"type-task\" \n            value={type} \n            onChange={() => typeTaskFilter(type)}\n            className=\"filter-input\"\n            data-testid={`${type}-filter`}\n            />        \n        </label>\n      ))}\n    </div>\n  );\n}\n\nexport default TaskFilter;\n","import React, { Component } from 'react'\nimport '../styles/Header.css';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className=\"header-container\">\n        <img data-testid=\"img-header\" id=\"header-img\" src=\"https://img.icons8.com/doodle/96/000000/checked-checkbox.png\" alt=\"header-img\"/>\n        <h1 id=\"header-title\">To do List</h1>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport TaskInput from '../components/TaskInput';\nimport TaskList from '../components/TaskList';\nimport TaskFilter from '../components/TaskFilter';\nimport '../styles/Todo.css';\nimport Header from '../components/Header';\n\n//  tests\n\nfunction Todo() {\n  return (\n    <div>\n      <div className=\"task-big-container\">\n        <Header />\n        <TaskInput />\n        <TaskFilter />\n      </div>\n      <TaskList />\n    </div> \n    );\n}\n\nexport default Todo;\n","import notesContext from './notesContext';\nimport React, { useState, useEffect } from 'react';\n\nfunction Provider ({ children }) {\n\n  const [notes, setNotes] = useState([]);\n  const [editNote, setEditNote] = useState(false);\n  const [done, setDone] = useState(false);\n  const [types, setTypes] = useState([\"all\", \"work\", \"home\", \"school\"]);\n  const [filteredTypeTasks, setFilteredTypeTasks] = useState([]);\n  const [filteredType, setFilteredType] = useState(\"all\");\n\n  const addNote = (note) => {\n    setNotes([...notes, note]);\n  };\n\n  const removeNote = (id) => {\n    setNotes(notes.filter(note => note.id !== id));\n  };\n\n  const saveEditedNote = (id, newText) => {\n    setNotes(notes.map(note => note.id === id ? { ...note, task: newText } : note));\n    setEditNote(false);\n  };\n\n  const handleTaskDoneStatus = (id) => {\n    setNotes(notes.map(note => note.id === id ? { ...note, done: !note.done } : note));\n    setDone(!done);\n  };\n\n  const typeTaskFilter = (type) => {\n    setFilteredType(type);\n  };\n\n  useEffect(() => {\n    setFilteredTypeTasks(notes.filter(note => note.type === filteredType));\n  }, [filteredType, notes])\n  \n  const state = {\n    notes,\n    setNotes,\n    addNote,\n    removeNote,\n    saveEditedNote,\n    editNote,\n    setEditNote,\n    handleTaskDoneStatus, \n    setTypes,\n    types,\n    filteredTypeTasks,\n    filteredType,\n    typeTaskFilter,\n  };\n  \n  return (\n    <notesContext.Provider value={ state } >\n      {children}\n    </notesContext.Provider>\n  )\n}\n\nexport default Provider;\n","import './App.css';\nimport React from 'react';\nimport Todo from './pages/Todo';\nimport Provider from './context/Provider';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <Provider>\n        <Todo />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}